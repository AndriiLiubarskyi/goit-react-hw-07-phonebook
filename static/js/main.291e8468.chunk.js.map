{"version":3,"sources":["components/Phonebook/Filter.module.css","components/Phonebook/ContactItem.module.css","redux/contacts/contacts-action.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/Phonebook/ContactAddForm.js","components/Phonebook/ContactItem.js","components/Phonebook/ContactList.js","components/Phonebook/Filter.js","App.js","redux/contacts/contacts-reduser.js","redux/store.js","index.js","components/Phonebook/ContactAddForm.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","dispatch","get","then","data","catch","error","name","number","contact","post","contactId","delete","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normalFilter","toLowerCase","includes","ContactAddForm","useSelector","useDispatch","useState","setName","setNumber","handleChange","e","target","value","className","styles","addForm","onSubmit","contactName","preventDefault","some","alert","contactsOperations","form","label","input","type","pattern","title","required","onChange","buttonAdd","ContactItem","id","onDeleteContact","contactItem","button","onClick","ContactList","map","Filter","contactsAction","App","useEffect","createReducer","_","payload","loading","combineReducers","store","configureStore","reducer","contactsReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","PAUSE","FLUSH","REHYDRATE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.291e8468.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"Filter_contacts__30YpS\",\"label\":\"Filter_label__1oFfr\",\"input\":\"Filter_input__2BeRI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"ContactItem_contactItem__tCFVn\",\"button\":\"ContactItem_button__2w5zQ\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n} from './contacts-action';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n    axios\r\n        .get('/contacts')\r\n        .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n        .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n    const contact = { name, number};\r\n    dispatch(addContactRequest());\r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n    axios\r\n        .delete(`/contacts/${contactId}`)\r\n        .then(({ data }) => dispatch(deleteContactSuccess(contactId)))\r\n        .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n    fetchContacts,\r\n    addContact,\r\n    deleteContact,\r\n};","import { createSelector } from \"reselect\";\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const isContactLoading = state => state.contacts.loading;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n [getContacts, getFilter],\r\n (contacts, filter) => {\r\n    const normalFilter = filter.toLowerCase();\r\n    return contacts.filter(contact =>\r\n        contact.name.toLowerCase().includes(normalFilter),\r\n    );\r\n }\r\n);","import { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport contactsOperations from \"../../redux/contacts/contacts-operations\";\r\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\r\nimport styles from './ContactAddForm.module.css';\r\n\r\nexport default function ContactAddForm() {\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch()\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n      switch (name) {\r\n        case 'name':\r\n          setName(value);\r\n          break;\r\n        case 'number':\r\n          setNumber(value);\r\n          break;\r\n      default: return;\r\n    }\r\n  }\r\n\r\n  const findName = contactName => {\r\n    return contacts.some(({ name }) => name === contactName);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (findName(name)) {\r\n        alert(`${name} is already in contacts!`);\r\n        return;\r\n    }\r\n    dispatch(contactsOperations.addContact({name, number}))\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n     <div className={styles.addForm}>\r\n         <form onSubmit={handleSubmit} className={styles.form}>\r\n           <label className={styles.label}>\r\n             Name\r\n             <input className={styles.input}\r\n               type=\"text\"\r\n               name=\"name\"\r\n               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n               title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n               required value={name}\r\n               onChange={handleChange}\r\n             />\r\n           </label>\r\n           <label className={styles.label}>\r\n             Number\r\n             <input className={styles.input}\r\n               type=\"tel\"\r\n               name=\"number\"\r\n               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n               title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n               required\r\n               value={number}\r\n               onChange={handleChange}\r\n             />\r\n           </label>\r\n           <button className={styles.buttonAdd} type=\"submit\">\r\n             Add contact\r\n           </button>\r\n         </form>\r\n      </div>\r\n  );\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactItem.module.css';\r\n\r\nconst ContactItem = ({ name, number, id, onDeleteContact }) => {\r\n    return (\r\n    <li className={styles.contactItem}>\r\n      <p>{name}: {number}</p>\r\n      <button className={styles.button} type=\"button\"\r\n        onClick={() => onDeleteContact(id)}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n    )\r\n};\r\n\r\nContactItem.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;","import React from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport ContactItem from './ContactItem';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\nconst ContactList = () => {\r\n    const contacts = useSelector(getVisibleContacts);\r\n    const dispatch = useDispatch();\r\n    const onDeleteContact = id => dispatch(contactsOperations.deleteContact(id))\r\n\r\n  return (\r\n  <ul>\r\n    {contacts.map(({ id, name, number }) => (\r\n        <ContactItem\r\n          key={id}\r\n          id={id}\r\n          name={name}\r\n          number={number}\r\n          onDeleteContact={()=> onDeleteContact(id)}\r\n        />\r\n      ))}\r\n    </ul>\r\n    )\r\n};\r\n\r\nexport default ContactList;","import React from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport * as contactsAction from '../../redux/contacts/contacts-action';\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\r\nimport styles from './Filter.module.css';\r\n\r\nconst Filter = () => {\r\n    const value = useSelector(getFilter);\r\n    const dispatch = useDispatch();\r\n    const onChange = e => dispatch(contactsAction.changeFilter(e.target.value))\r\n    return (\r\n      <div className={styles.contacts}>\r\n        <label className={styles.label}>\r\n            Find contacts by name\r\n          <input className={styles.input}\r\n            type=\"text\"\r\n            name=\"filter\"\r\n            value={value}\r\n            onChange={onChange}\r\n          />\r\n        </label>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Filter;\r\n\r\n\r\n\r\n\r\n","import ContactAddForm from './components/Phonebook/ContactAddForm';\r\nimport ContactList from './components/Phonebook/ContactList';\r\nimport Filter from './components/Phonebook/Filter';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useEffect } from 'react';\r\nimport contactsOperations from './redux/contacts/contacts-operations';\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n  \r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <ContactAddForm  />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    changeFilter\r\n} from './contacts-action';\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactsSuccess]:(_, { payload }) =>payload,\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n    [deleteContactSuccess]: (state, { payload }) => state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactsRequest]: () => true,\r\n    [fetchContactsSuccess]: () => false,\r\n    [fetchContactsError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({ items, filter, loading});","import { configureStore } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport { PAUSE, FLUSH, REHYDRATE, PERSIST, PURGE, REGISTER,} from 'redux-persist';\r\nimport contactsReducers from './contacts/contacts-reduser';\r\n\r\nconst middleware = (getDefaultMiddleware) => getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [PAUSE, FLUSH, REHYDRATE, PERSIST, PURGE, REGISTER,],\r\n    },\r\n}).concat(logger);\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducers,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './redux/store'\r\nimport 'modern-normalize/modern-normalize.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonAdd\":\"ContactAddForm_buttonAdd__q5IuX\",\"addForm\":\"ContactAddForm_addForm__2MVfc\",\"form\":\"ContactAddForm_form__1fZui\",\"label\":\"ContactAddForm_label__1ufaD\",\"input\":\"ContactAddForm_input__1EUba\"};"],"sourceRoot":""}